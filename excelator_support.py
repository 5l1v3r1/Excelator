#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Mar 07, 2019 10:36:02 PM


import sys
import openpyxl
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def reverse_cols():
    location=w.path.get()
    wb=openpyxl.load_workbook(location) 
    ws1=wb.active
    n=int(ws1.max_column/2)
    
    for every_row in range(1,ws1.max_row+1):
        for item in range(0,n):
            first_value=ws1.cell(row=every_row,column=item+1).value
            second_value=ws1.cell(row=every_row,column=ws1.max_column-item).value
            temp1=first_value
            temp2=second_value
            a=ws1.cell(row=every_row,column=item+1)
            a.value=temp2
            b=ws1.cell(row=every_row,column=ws1.max_column-item)
            b.value=temp1

    wb.save(location)
    sys.stdout.flush()       



def getfullrow():
    #print('excelator_support.getfullrow')
    search_value=w.TEntry1.get()
    location=w.path.get()
    wb=openpyxl.load_workbook(location) 
    ws1=wb.active
    for each_row in range(1,ws1.max_row+1):
        for each_column in range(1,ws1.max_column+1):
            val=ws1.cell(row=each_row,column=each_column)
            if val.value==search_value:
                for every in range(1,ws1.max_column+1):
                    print(str(ws1.cell(row=each_row,column=every).value)+" ",end=" ")

    sys.stdout.flush()

def getspecifiedcols():
    #print('excelator_support.getspecifiedcols')
    search_value=w.TEntry1.get()
    location=w.path.get()
    wb=openpyxl.load_workbook(location)
    ws1=wb.active
    l=[]
    cols=w.cols.get()
    l=cols.split(",")
    #print(l)
    #l has all columns to search for 
    for each_row in range(1,ws1.max_row+1):
        for each_column in range(1,ws1.max_column+1):
            val=ws1.cell(row=each_row,column=each_column)
            if val.value==search_value:
                for every in range(0,len(l)):
                    print(str(ws1.cell(row=each_row,column=int(l[every])).value)+" ",end=" ")
    sys.stdout.flush()


def loadexcel():
    #print('excelator_support.loadexcel')
    location=w.path.get()
    wb=openpyxl.load_workbook(location)
    print("sheet names are ",wb.sheetnames)
    w.TLabel2.config(text="available sheets are "+str(wb.sheetnames)+" active sheet is "+str(wb.active))
    sys.stdout.flush()

def modifyvalue():
    #print('excelator_support.modifyvalue')
    location=w.path.get()
    wb=openpyxl.load_workbook(location) 
    ws1=wb.active
    old_value=w.old.get()
    new_value=w.new.get()
    for each_row in range(1,ws1.max_row+1):
        for each_column in range(1,ws1.max_column+1):
            val=ws1.cell(row=each_row,column=each_column)
            if val.value==old_value:
                val.value=new_value
    wb.save(location)
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import excelator
    excelator.vp_start_gui()

